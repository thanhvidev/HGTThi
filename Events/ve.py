import asyncio
import json
import discord
import random
import sqlite3
import datetime
from discord.ext import commands
import datetime
import pytz
from utils.checks import is_bot_owner, is_admin, is_mod

# K·∫øt n·ªëi v√† t·∫°o b·∫£ng trong SQLite
# conn = sqlite3.connect('economy.db', isolation_level=None)
# conn.execute('pragma journal_mode=wal')
# cursor = conn.cursor()

def load_random_chance():
    with open('ve.json', 'r') as f:
        data = json.load(f)
        return data.get('random_chance', 0.3)  # Default to 0.3 if not found

random_chance = load_random_chance()

conn = sqlite3.connect('economy.db')
cursor = conn.cursor()

# T·∫°o b·∫£ng ve_database n·∫øu ch∆∞a t·ªìn t·∫°i
cursor.execute('''CREATE TABLE IF NOT EXISTS ve_database (
                  id INTEGER PRIMARY KEY,
                  num_gold_tickets_available INTEGER DEFAULT 8890,
                  num_diamond_tickets_available INTEGER DEFAULT 70,
                  quantity_tickets INTEGER DEFAULT 0,
                  tong_tickets INTEGER DEFAULT 0,
                  daily_keo INTEGER DEFAULT 0,
                  daily_bonus1 INTEGER DEFAULT 0,
                  daily_bonus2 INTEGER DEFAULT 0,
                  daily_bonus3 INTEGER DEFAULT 0,
                  daily_bonus4 INTEGER DEFAULT 0,
                  daily_nglieu1 INTEGER DEFAULT 0,
                  daily_nglieu2 INTEGER DEFAULT 0,
                  daily_nglieu3 INTEGER DEFAULT 0,
                  daily_nglieu4 INTEGER DEFAULT 0
               )''')
conn.commit()

# C·∫≠p nh·∫≠t b·∫£ng ve_database ch·ªâ khi ch∆∞a c√≥ d·ªØ li·ªáu
cursor.execute('INSERT OR IGNORE INTO ve_database (id, num_gold_tickets_available, num_diamond_tickets_available) VALUES (?, ?, ?)',
               (1, 8890, 70))
conn.commit()

def is_registered(user_id):  # H√†m ki·ªÉm tra xem ng∆∞·ªùi d√πng ƒë√£ ƒë∆∞·ª£c ƒëƒÉng k√Ω hay ch∆∞a
    cursor.execute("SELECT * FROM users WHERE user_id = ?", (user_id,))
    return cursor.fetchone() is not None

vevang = "<:vevang:1192461054131847260>"
vekc = "<:vekc:1146756758665175040>"

# 128 v√©/ng√†y, 10 v√© kc/ng√†y => v√© kc r∆°i t·∫°i c√°c v·ªã tr√≠ c·ªë ƒë·ªãnh m·ªói ng√†y  
# M·ªü r·ªông ƒë·ªÉ c√≥ ƒë·ªß v√© kim c∆∞∆°ng cho nhi·ªÅu ng√†y h∆°n
trungvekc = []
for day in range(100):  # M·ªü r·ªông l√™n 100 ng√†y ƒë·ªÉ ƒë·ªß v√© KC
    base = day * 128
    trungvekc.extend([base + 10, base + 20, base + 30, base + 40, base + 50, base + 60, base + 70, base + 80, base + 90, base + 100])

# Kh√¥ng gi·ªõi h·∫°n 70 v√© n·ªØa, ƒë·ªÉ c√≥ ƒë·ªß v√© KC cho d√†i h·∫°n
# trungvekc = trungvekc[:70]  # B·ªè gi·ªõi h·∫°n n√†y

class Ve(commands.Cog):
    def __init__(self, client):
        self.client = client
        self.allowed_channel_id = 993153068378116127
        self.last_winner_user_id = None  # L∆∞u ID c·ªßa ng∆∞·ªùi v·ª´a tr√∫ng v√© g·∫ßn nh·∫•t
        self.user_cooldowns = {}  # Dict ƒë·ªÉ track th·ªùi gian nh·∫≠n v√© cu·ªëi c√πng {user_id: timestamp}
        self.cooldown_minutes = 10  # Cooldown 10 ph√∫t gi·ªØa c√°c l·∫ßn nh·∫≠n v√©

    @commands.Cog.listener()
    async def on_message(self, message):
        global user_last_ticket_received
        
        if message.author.bot or message.channel.id != self.allowed_channel_id:
            return
        if not is_registered(message.author.id):
            return
        timezone = pytz.timezone('Asia/Ho_Chi_Minh')
        now_vietnam = datetime.datetime.now(timezone)

        # Ki·ªÉm tra reset h√†ng ng√†y - s·ª≠ d·ª•ng logic t·ªët h∆°n
        cursor.execute('SELECT quantity_tickets FROM ve_database')
        result = cursor.fetchone()
        current_quantity = result[0] if result else 0
        
        # Reset n·∫øu ƒë√£ qua 14:00 v√† ch∆∞a reset h√¥m nay
        if now_vietnam.hour >= 14 and current_quantity >= 128:
            cursor.execute('UPDATE ve_database SET quantity_tickets = 0')
            conn.commit()
            cursor.execute('UPDATE users SET daily_tickets = 0')
            conn.commit()
            # X√≥a t·∫•t c·∫£ cooldowns khi reset daily
            self.user_cooldowns.clear()
            print(f"[VE] Reset daily tickets and cooldowns at {now_vietnam.strftime('%H:%M:%S')}")

        if random.random() < random_chance:
            user_id = message.author.id
            
            # Ki·ªÉm tra cooldown - ng∆∞·ªùi d√πng ph·∫£i ƒë·ª£i √≠t nh·∫•t 10 ph√∫t gi·ªØa c√°c l·∫ßn nh·∫≠n v√©
            current_time = now_vietnam.timestamp()
            if user_id in self.user_cooldowns:
                time_since_last = current_time - self.user_cooldowns[user_id]
                if time_since_last < (self.cooldown_minutes * 60):  # Ch∆∞a ƒë·ªß cooldown
                    return
            
            # Ki·ªÉm tra n·∫øu ng∆∞·ªùi n√†y v·ª´a tr√∫ng v√© l·∫ßn tr∆∞·ªõc th√¨ b·ªè qua
            if user_id == self.last_winner_user_id:
                return
            
            trung_ve = tao_lenh_tang_ve(user_id)
            if trung_ve == "V√© v√†ng":
                self.last_winner_user_id = user_id  # L∆∞u ID ng∆∞·ªùi v·ª´a tr√∫ng
                self.user_cooldowns[user_id] = current_time  # C·∫≠p nh·∫≠t cooldown
                await message.add_reaction(vevang)
            elif trung_ve == "V√© kim c∆∞∆°ng":
                self.last_winner_user_id = user_id  # L∆∞u ID ng∆∞·ªùi v·ª´a tr√∫ng
                self.user_cooldowns[user_id] = current_time  # C·∫≠p nh·∫≠t cooldown
                await message.add_reaction(vekc)
                
    @commands.command()
    @is_bot_owner()
    async def tile(self, ctx, chance: float):
        if 0 <= chance <= 1:
            global random_chance
            random_chance = chance
            with open('ve.json', 'r') as f:
                data = json.load(f)
            data['random_chance'] = chance
            with open('ve.json', 'w') as f:
                json.dump(data, f, indent=4)
            await ctx.send(f"ƒê√£ c·∫≠p nh·∫≠t random_chance th√†nh {chance}")
        else:
            await ctx.send("Gi√° tr·ªã chance ph·∫£i t·ª´ 0 ƒë·∫øn 1")
    
    @commands.command()
    @is_bot_owner()
    async def fixve(self, ctx):
        """S·ª≠a ch·ªØa d·ªØ li·ªáu v√© n·∫øu c√≥ v·∫•n ƒë·ªÅ"""
        cursor.execute('SELECT num_gold_tickets_available, num_diamond_tickets_available, quantity_tickets, tong_tickets FROM ve_database')
        ve_data = cursor.fetchone()
        
        if not ve_data:
            await ctx.send("‚ùå Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu ve_database!")
            return
            
        num_gold_tickets_available, num_diamond_tickets_available, quantity_tickets, tong_tickets = ve_data
        
        # T·∫°o embed b√°o c√°o
        embed = discord.Embed(title="üìä B√°o c√°o tr·∫°ng th√°i v√©", color=0x00ff00)
        embed.add_field(name="V√© v√†ng c√≤n l·∫°i", value=f"{num_gold_tickets_available:,}", inline=True)
        embed.add_field(name="V√© KC c√≤n l·∫°i", value=f"{num_diamond_tickets_available:,}", inline=True)
        embed.add_field(name="V√© ƒë√£ ph√°t h√¥m nay", value=f"{quantity_tickets}/128", inline=True)
        embed.add_field(name="T·ªïng v√© ƒë√£ ph√°t", value=f"{tong_tickets:,}", inline=True)
        
        # Ki·ªÉm tra v√† s·ª≠a l·ªói
        fixes_made = []
        
        # Fix 1: ƒê·∫£m b·∫£o quantity_tickets kh√¥ng v∆∞·ª£t qu√° 128
        if quantity_tickets > 128:
            cursor.execute('UPDATE ve_database SET quantity_tickets = 128')
            fixes_made.append(f"ƒê√£ gi·∫£m quantity_tickets t·ª´ {quantity_tickets} xu·ªëng 128")
            quantity_tickets = 128
            
        # Fix 2: ƒê·∫£m b·∫£o s·ªë v√© kh√¥ng √¢m
        if num_gold_tickets_available < 0:
            cursor.execute('UPDATE ve_database SET num_gold_tickets_available = 0')
            fixes_made.append(f"ƒê√£ tƒÉng num_gold_tickets_available t·ª´ {num_gold_tickets_available} l√™n 0")
            
        if num_diamond_tickets_available < 0:
            cursor.execute('UPDATE ve_database SET num_diamond_tickets_available = 0')
            fixes_made.append(f"ƒê√£ tƒÉng num_diamond_tickets_available t·ª´ {num_diamond_tickets_available} l√™n 0")
            
        if fixes_made:
            conn.commit()
            embed.add_field(name="üîß S·ª≠a ch·ªØa ƒë√£ th·ª±c hi·ªán", 
                          value="\n".join(fixes_made), inline=False)
            embed.color = 0xff9900
        else:
            embed.add_field(name="‚úÖ Status", value="D·ªØ li·ªáu v√© ƒëang ·ªïn ƒë·ªãnh", inline=False)
            
        await ctx.send(embed=embed)
    
    @commands.command()
    @is_bot_owner()
    async def resetdaily(self, ctx):
        """Reset th·ªß c√¥ng s·ªë v√© h√†ng ng√†y"""
        cursor.execute('UPDATE ve_database SET quantity_tickets = 0')
        cursor.execute('UPDATE users SET daily_tickets = 0')
        conn.commit()
        
        # X√≥a t·∫•t c·∫£ cooldowns
        cooldown_count = len(self.user_cooldowns)
        self.user_cooldowns.clear()
        
        embed = discord.Embed(
            title="üîÑ Reset Daily Tickets", 
            description=f"ƒê√£ reset s·ªë v√© h√†ng ng√†y v·ªÅ 0 cho t·∫•t c·∫£ ng∆∞·ªùi d√πng\nƒê√£ x√≥a {cooldown_count} cooldowns",
            color=0x00ff00
        )
        await ctx.send(embed=embed)
    
    @commands.command()
    @is_bot_owner()
    async def setcooldown(self, ctx, minutes: int):
        """Thi·∫øt l·∫≠p th·ªùi gian cooldown gi·ªØa c√°c l·∫ßn nh·∫≠n v√© (ph√∫t)"""
        if minutes < 0 or minutes > 60:
            await ctx.send("‚ùå Cooldown ph·∫£i t·ª´ 0-60 ph√∫t")
            return
            
        self.cooldown_minutes = minutes
        embed = discord.Embed(
            title="‚è∞ C·∫≠p nh·∫≠t Cooldown", 
            description=f"ƒê√£ thi·∫øt l·∫≠p cooldown th√†nh **{minutes} ph√∫t** gi·ªØa c√°c l·∫ßn nh·∫≠n v√©",
            color=0x00ff00
        )
        if minutes == 0:
            embed.description = "üö´ **ƒê√£ T·∫ÆT cooldown** - User c√≥ th·ªÉ nh·∫≠n v√© li√™n t·ª•c"
            embed.color = 0xff0000
        await ctx.send(embed=embed)
    
    @commands.command()
    @is_bot_owner()  
    async def cooldownstatus(self, ctx):
        """Xem tr·∫°ng th√°i cooldown c·ªßa c√°c user"""
        if not self.user_cooldowns:
            await ctx.send("üìù Ch∆∞a c√≥ user n√†o trong cooldown")
            return
            
        timezone = pytz.timezone('Asia/Ho_Chi_Minh')
        current_time = datetime.datetime.now(timezone).timestamp()
        
        embed = discord.Embed(title="‚è∞ Tr·∫°ng th√°i Cooldown", color=0x00ff00)
        embed.add_field(name="‚öôÔ∏è Settings", value=f"Cooldown: **{self.cooldown_minutes} ph√∫t**", inline=False)
        
        active_cooldowns = []
        expired_cooldowns = []
        
        for user_id, last_time in list(self.user_cooldowns.items()):
            time_since = current_time - last_time
            remaining = (self.cooldown_minutes * 60) - time_since
            
            try:
                user = self.client.get_user(user_id) or await self.client.fetch_user(user_id)
                username = user.display_name if user else f"User {user_id}"
            except:
                username = f"User {user_id}"
            
            if remaining > 0:
                mins, secs = divmod(int(remaining), 60)
                active_cooldowns.append(f"‚Ä¢ {username}: {mins}m{secs}s")
            else:
                expired_cooldowns.append(user_id)
        
        # X√≥a cooldowns ƒë√£ h·∫øt h·∫°n
        for user_id in expired_cooldowns:
            del self.user_cooldowns[user_id]
        
        if active_cooldowns:
            cooldown_text = "\n".join(active_cooldowns[:10])  # Gi·ªõi h·∫°n 10 ng∆∞·ªùi
            if len(active_cooldowns) > 10:
                cooldown_text += f"\n... v√† {len(active_cooldowns) - 10} ng∆∞·ªùi kh√°c"
            embed.add_field(name="üîí ƒêang trong cooldown", value=cooldown_text, inline=False)
        else:
            embed.add_field(name="‚úÖ Status", value="Kh√¥ng c√≥ user n√†o trong cooldown", inline=False)
            
        await ctx.send(embed=embed)
    

def tao_lenh_tang_ve(user_id):
    # S·ª≠ d·ª•ng transaction ƒë·ªÉ tr√°nh race condition
    conn.execute('BEGIN TRANSACTION')
    try:
        cursor.execute(
            'SELECT num_gold_tickets_available, num_diamond_tickets_available, quantity_tickets, tong_tickets FROM ve_database')
        ve_data = cursor.fetchone()

        if not ve_data:
            conn.rollback()
            return None

        num_gold_tickets_available, num_diamond_tickets_available, quantity_tickets, tong_tickets = ve_data
        
        # Ki·ªÉm tra hard limit - kh√¥ng ƒë∆∞·ª£c v∆∞·ª£t qu√° 128 v√©/ng√†y
        if quantity_tickets >= 128:
            conn.rollback()
            return None
            
        # Ki·ªÉm tra daily_tickets c·ªßa ng∆∞·ªùi d√πng
        cursor.execute(
            'SELECT daily_tickets, kimcuong FROM users WHERE user_id = ?', (user_id,))
        user_data = cursor.fetchone()
        danh_sach_3_ve_ngay = [1021383533178134620, 1110815562910670890]
        danh_sach_cam_user_id = [1043086185557393429, 758208203019517972, 893690187501166613, 1173834427667861616, 988714712961286144, 1019284062294253659, 840058737191288832, 852692490468458566]
        
        if user_data and (user_id in danh_sach_3_ve_ngay) and user_data[0] >= 12:
            conn.rollback()
            return None
        elif user_id in danh_sach_cam_user_id:
            conn.rollback()
            return None
        elif user_data and user_data[0] >= 10:
            conn.rollback()
            return None

        # Ki·ªÉm tra v√© kim c∆∞∆°ng TR∆Ø·ªöC - ki·ªÉm tra v·ªã tr√≠ v√© ti·∫øp theo  
        next_ticket_position = tong_tickets + 1
        if (next_ticket_position in trungvekc and 
            num_diamond_tickets_available > 0 and 
            quantity_tickets < 128):
              
            new_num_diamond_tickets = num_diamond_tickets_available - 1
            new_quantity_tickets = quantity_tickets + 1
            new_tong_tickets = tong_tickets + 1
            
            # Ki·ªÉm tra l·∫ßn cu·ªëi tr∆∞·ªõc khi commit
            if new_num_diamond_tickets >= 0 and new_quantity_tickets <= 128:
                cursor.execute('UPDATE ve_database SET num_diamond_tickets_available = ?, quantity_tickets = ?, tong_tickets = ?',
                               (new_num_diamond_tickets, new_quantity_tickets, new_tong_tickets))
                cursor.execute(
                    'UPDATE users SET num_diamond_tickets = num_diamond_tickets + 1, daily_tickets = daily_tickets + 1, kimcuong = kimcuong + 1 WHERE user_id = ?', (user_id,))
                conn.commit()
                return "V√© kim c∆∞∆°ng"
            else:
                conn.rollback()
                return None
                
        # Ki·ªÉm tra v√© v√†ng SAU - th√™m ƒëi·ªÅu ki·ªán ki·ªÉm tra ch·∫∑t ch·∫Ω h∆°n
        elif (random.random() < 0.1 and 
            num_gold_tickets_available > 0 and 
            quantity_tickets < 128):
            
            new_num_gold_tickets = num_gold_tickets_available - 1
            new_quantity_tickets = quantity_tickets + 1
            new_tong_tickets = tong_tickets + 1
            
            # Ki·ªÉm tra l·∫ßn cu·ªëi tr∆∞·ªõc khi commit
            if new_num_gold_tickets >= 0 and new_quantity_tickets <= 128:
                cursor.execute('UPDATE ve_database SET num_gold_tickets_available = ?, quantity_tickets = ?, tong_tickets = ?',
                               (new_num_gold_tickets, new_quantity_tickets, new_tong_tickets))
                cursor.execute(
                    'UPDATE users SET num_gold_tickets = num_gold_tickets + 1, daily_tickets = daily_tickets + 1, kimcuong = kimcuong + 1 WHERE user_id = ?', (user_id,))
                conn.commit()
                return "V√© v√†ng"
            else:
                conn.rollback()
                return None
        else:
            conn.rollback()
            return None
            
    except Exception as e:
        conn.rollback()
        print(f"L·ªói trong tao_lenh_tang_ve: {e}")
        return None

async def setup(client):
    await client.add_cog(Ve(client))